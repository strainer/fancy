jotes are generatable and rendered quite well.jotes can be rostered by grid division of pos spacejotes could be rostered by grid division of vel spacerostered by rosterI  - number of sections in roster +1  roster   - number of members in setmake mini groups of jotesmake griddivs of dv  foreach griddiv   if numb jotes in griddiv < 32     make minigroups of grid	   		 runnable measurementstotal veltotal velocity squaredsum*sum/squaresum,=1 when all equal<1 when diverse4 4 4 4s 16sq 64s 16sq802 2 6 6add to negative previousrunner= -runner + thisoneaverage difference, between space sub divisiondivision levelsmaximum division leveloutsize level1st level of division might be compromised by far lying outliers2nd level of division init scans atoms of parent before beginning?nope - no need, it subdivides normally,add_atoms()  	buildscaffolds	  outsize level 		divdepth 0,1,2,3,4,5,6...space division for kinninghow to convoy? 16k kinsbrute force is to...  	score each possible pair in each zector		making list of scores and pairings		prscores float32 array	pairings bytearray		for a zector 1000, this list will be aprox 10,000 long		score is sector population factor * posdif +veldif		this score info series , ordered by zector , can be repeatedly scanned to fill	kins			sort atom>score		sweep alscores 	  if atomp.solo and atomq.solo then 		  pair	sweep again	  if atomp.solo or atomq.solo		  growsort kins and particles by midpoint  avoid making brute force maps of the space		map into cache space of a couple of maps	work with 4 mapspaces		go into space to find target density frames		for a particle calculate link likely factor -quick	its always running link to previous, or	full sweep necessary	particle schnaffing, into groups...	happens like caterpillar game in 3d,		gobbles groups into subgroups,		64k chars - maxing out		64k* 32*3  position bytes	64k  32 3  vel bytes		compression not possible		a draught worm of nearby associated groups	lists them for recall		the worm may be dissolved	by later transactions of the groups		the transactions occur after all is in associated upgroups		the worm creates groups and assigns to upgroups	particle		the wormieness can alter linear cache strategy	hopefuly associated groups go in memory nearborhood		each level of grouping, intergroups are checked,	and check its intergroup from interactions, intergroups		if interaction check all intergroups		all minimum groups need full interchecked (quadractic)	upgroups need only crosscheck (linear)  no! upgroups need intercheck of subgroups - quadtratic	crosscheck (a linear e) occurs between groups		all subgroups need checked,	there time should be calculated while creating?		nope, create in naivity of actual timing checks	while initialising a raw set	timing critical info wants timecached...		foreach( M of bigger )	  do this to M and other M		collide	  	  if it fits with other sub, 		  foreach (  of sub						#	anyway a worming search/travel fast and complete/ algorithm # populates a list of groupings:			each particle, what its its subgroup	for caching, also its other groups - perhaps		this is calculated, and rosters of	particles / groups in nearby groups		roster as a listing of members in a group	what are the members of my group		roster of groups,		  ga	roster of gbs in ga	rosters of gcs in gbs		know-->	what parts in mins :64k roster	what min of part		64k/8  8k - minima, have each 8t max             	8k /8  1k - mid   what mins in mids 1k roster  	1k /8  128 men   what mids in mens 128        	128/8  16 max    what mens in max 16         	16 /16 1 u                                   			sa is space available	tm is theoretical max	tn is theoretical full normal		tm	8pg       4pg    6pg		64k  tks  64     64	8k   g0   16k    16 4pg	1k   g1   4k     3k 6pg	128  g2   1k     512 6pg	16   g3   256    128 4pg			tks /4	tks /24	tks /146	tks /512				all groups sizes are max 8	max space is allocated for groups	according to working average group population	which is less than max		16k g0s  4pg	4k  g1s  4pg	1k  g2s  4pg	128 g3s  8pg	max8 groups need 		real target for downgrouping is 5 to 7		64k fits 8k 8 groups	8k groups need 16bits -/3				what mid of min - min time mid	what min in mid	what mid of min	what mid of prt	what prts in min - no 		64k roster, or 8k*max_group_size flatarray	64k   >>3	8k    >>3  mingrps	1k    >>3  midgrps	128   >>3  medgrps	16    >>4  maxgrps  			64 ki tacks       16 bit address req	8k mingrps  (>>3) 13	1k midgrps  (>>3) 10	128 medgrps (>>3) 7	16 maxgrps  (>>3) 4final groupsize should be set ok for quadingand enough to be reductivesimpletacks are minimal propertyto do fluid dynamics small scale approximationsgrps have coalescing center of mass for gravitation application	mem number :to: serial meaning number		serial meaning number	encodes 	          inner g chks    gs per    outer g checksg_size	     per 100t        100t      per 100t	1 0              -    	2 1             50          50	3 3            100          33	4 6            150          25	5 10           200          20        190	6 15           250          16.7      135 	7 21           300          14         91	8 28           350          12.2       78	9 36           400          11.1       56	10 45          450          10         45	11 55          500		100           4950		top level of groupsgives the first intercheck from its assistive separationtop level is used for feild effects?-outlier particles will	presence strings, strings of presenceskolobi yao shapeorder in the roster is raw dependent on the order of raw loopstring comparison, the roster address of particles is not well orderableits order should be arbitrarythe inner details are considered always as wholedual space extents - furthest reach in valid intervalengine dioramaswind simulated reduced vacuum air simulationsquishy hot/cold air presencesfeeding ps into groupsdensity of frame , informs average 3distno information on ave vel?meaning of a 3-dist?what is certainly large, - beyond box boundswhat is small, dont know, because central clump of boxis unknownrandom sampling to determine large and small 3dists for population32, for each p, - it has 3dists to all otherssome ps are alonesome are in crowdpregroups and pregroup processingclumping tacksto isolate collidabilityto isolate add particles to potsbased on acceptance factorcalculated/refinedpos diff        being sameness  - vel diff        going sameness  - not better for closing or leaving pos(pos+vel) diff  coming togetherness  - better for closing pos(pos+vel/2) diff  coming togetherness  - better for closing pos, and better for crossovers(pos diff) + 2*(pos+vel/2 diff) 