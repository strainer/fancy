
features

 detect collision
  collision type - instant event
  
  the spotmap system quests up all jote pairings
  there is not an efficient way to exclude jote pairings from quest
  options:
   leaf node objects
   superjote objects  sujobe
    has geometry within its radius
    options for geometry
     number of smaller spheres in fixed position
     or number of texel surfaces in fixed position
     with quaternion orientation and spin
   sujos can have elastic links to other sujos
   
   
   current collider deals with 8000 jotes
   sujos 5 to 50 more complex
   sujos are collided , details of their links help resolve
   collision
   if they are linked they are in touch
   if their elasticity is low they...
   they have link types
    simple avg shift link
    bending, stretching, deforming link
    how to code a link graph ? 
     within sujos geometry is fixed, orientation changes
     between jos a graph of links can execute structure
     so there are two levels of structure
      sujo and graps 
      sojo is a jote which has orientation, 
      spin, geometry
      to inform collision response
      grap is a graph which relates many particles by
      slightly deformable links
      graps can be treated as gross fixed geometries
      with each particle pulling on its origin
      to produce a gross movement to be applied to the whole
      if/when individual pulls are too strong
      the graphs effect chain is reviewed to effect links
      
1j 1kg 10 cm

  examples of collision types:
    jote wind particles, soft independant transient event proximity pressure
     contacts involving wind particles can be applied aordered
    jote ball particle, hard independant chained event single contact  
     ball particle contacts are scheduled in order
     if ball is part of a piece it may be considered free and corrected later
     after, or it may be considered restricted and corrected now
     if affected more than its restriction
     
    jote edge particle, 


  since contact processing hinges on spherical approximations
  how to reduce the processing demands of sheres in constant
  contact?
  when jotes are found to be in constant contact put them into
  same leaf... flag leaf as not requiring internal quest
  make list of constant contacts as they are found
  but this contact list includes
   hard fixed contacts, and soft 'pressure/friction points'
  a thing is:
   different types of physical model, benefit from different optimisations
   the particle clouds model differs from a landscape model
   in how everything in particle cloud is in relative motion
   in a landscape many things can be relatively still
   contact quest in a landscape is economised to finding
   what everything in relative motion contacts
   which optimises as checking the space around moving things
   for contact with moving things
   
   particle cloud example is good for developing optimised
   bulk-wide collision processing 
   
   particle cloud conviently includes no fixed relations 
   - no rigid body calculations.
   
   a design aspects include
    how to improve particle cloud modelling
    how to anticipate and begin to accomodate features for 
    landscape modelling...
    
   the space-graph created and maintained to quest encounters
   wants to arrange and flag 'inert leafs', these are leafs
   which do not merit interquest.
   inert spots maybe another possibility, spots all of whose 
   members do not merit interquest
   inert trunk spots are then a possibility,
    these would be omitted from the 
    'speed gradient graph refreshment process' which
    serves the particle cloud
   spotmap should be deblobbed to help 
   organise such additional facets

   question when does is it advantage to subdetail jotes?
   when rigid body faculties they should be subpacked into jotes
   but rgdjotes should also be joinable and splitable 
