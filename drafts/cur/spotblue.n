#spotmap work
  generalise spotmap  -- resist becoming extended project of its own
   new spotmap for database
    load elements
    remove element
    add element
     add element slow
     add element fast
    regraph elements
    dls - delineation sequence
    ctome - connectome of elements
     of multiroot tree
     consecutive roots, rough reordering
     
 spotmap, 
  the delin seq has no gaps
  the ctome is made of nodes, 
  live nodes which are linked to parent nodes
  and null nodes which are empty record space
  node is record of a set of related jotes
  which has self similar siblings.
     
#spotmaps trunk chunbking
   the nodes directly under the root node of the whole map/tree
   are not divided by the search-topical-measure [spatial proxmy]
   they are divided roughly by their 'heat'
   they are divided by non search-topical-measure
   in order to help update the map for part refresh
   in keyitems
   
   chart of spotmaps spots:
   lvl 0  : the root spot
   lvl 1  : the trunk spots
   lvl 2> : bounding spots
   lvl n  : leaf spots
   
   the spots are useful to search queries, because they
   are measurable, so it can be known that none of the spots
   linked under a spot extend beyond recorded measured bounds
   of the top spot.
   The spot does not necessarily link under it, all of the 
   map spots which are within its bounds, because the trunkspots
   are not divided by space-bounds.
   To query all spots or items within any spatial bounds,
   bound-check against all spots under the root.   
   
   Indexing spaces between the children of the trunk spots are gapped 
   to allow inplace-partial-regraphing of the spotmap
   
   Indexing of spots goes like
  
                               empty spots
   Root    0
   Trunks  1 2 3 4
   progeny of Trunk1: 5-105        90-105 
   progeny of Trunk2: 106-205     190-205
   progeny of Trunk3: 206-305     290-305
   progeny of Trunk4: 306-405     390-405
   
   These numbers are spot record numbers, which are 
   addresses in the array storage of spot records.
   Empty records are present because as our mapped items
   move in their space, they require regraphed into our map
   and when they are regraphed they may fit into more or less
   spots. 
   Shifting spot records around in their storage array
   is a bit expensive, requiring adjustment of interconnecting
   references. So it is minimised by allowing a fraction of 
   addresses to be empty.
   
   The point of the having the trunk spots - not divided by space,
   is to allow incremental regraphing of the map and fast addition
   of new items.
   
   with trunks divided by item velocity, it is possible
   to redivide pairs of trunks (effectively sorting items into fastest
   and slowest) and then regraph them.
   By incrementally resorting pairs of trunks
   The trunks as a whole are maintained in an order fast (changing) trunks
   to slow changing trunks. And the faster trunks can be regraphed more often
   in addition to the .
   The optimimum number of trunks to keep is a calibratable and even
   dynamically changeable detail.
   
   
   spotmap is an adt map of data with multiple dimensions 
   (map in the plain and common sense of the word not
   the name which has been given to an iterable dicitionary)
  
   spotmap, maps items into dimensioned 'spots'
   which are conceptually fragments of clusters in the coordinated space
   
   spotmap is a mapping device
   