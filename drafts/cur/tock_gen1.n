#about design

The applets physic memory demand is fixed at about 2megs

General programming advice very firmly urges attending to function first and speed last. But this engine was designed with speed and function both wrestling for attention.
It is written in java for convienience and portability, but avoids unneccessary class division, instead using a dense class containing arrays of primitives. Most of the math is performed on integer types, which is less convient than floatingpoint math but can run quicker and slightly more accurately if arranged well.
The engines memory demand is fixed at about 2megs. Which store spatial and temporal and type data on upto 32000 particles, but most memory is allocated to scratch discernment details of collision detection working.
The full model state of 32k particles is storable raw, in about 1meg,
the

#4.3 billion - the 32 bit measure

simple base 3d physics game engine
start goal, 3d fire fountain in space.
data stored in arrays to avoid hl overhead


\\a fast bunch membership calculations

if ( stance.posA_xyz[0]==bunch.posA_xyz[0]
&&stance.posA_xyz[1]==bunch.posA_xyz[1]
&&stance.posA_xyz[2]==bunch.posA_xyz[2] )
{ //dest is good, enumerate direction aggreement
	difxvel =abs((st.paxA[0]-st.paxB[0])-
	     (bn.paxA[0]-bn.paxB[0]) )
	difyvel =
	difzvel =

\\ bunching policy
fastest - stance postion is equal to bunch	

stancelist
bunchlist

dotime
	while(bunchup)
	{ bunchup }

	while(addstnces)
	{ addstnc }

	while(docollide)
	{ docollide }

	while(dotime)
	{ dotime }

	return donetime

//collision 

int x positional,

-------------- 
space frame of 4.3 billion

if 1 is 1mm,  4.300 000 000 1mm = 4.3 thousand km

speed = clicks per tock
very low speed? 16 to 256

2'0 - 1mm  2'24 = 17Km
2'0 -1um 2'24=17 m , 2'29 = 537m 

integer quantising ranges:
subscopic        0 - 7    1-256       8
miniscopic       8 - 14   1-256       8
scopic          15 - 21   1-256       8
maxiscopic      24 - 27   1-64        6
overscope       30 - 32   1-2         2

subscopic is considered as values susceptable to noise from rounding error.

precise stance detail is stored as positions separated by 1 tock, but when sometimes stored for under 1 tock r/e can increase.

the smallest safish size in simulation should be around 256
to stay above dither and r/e.
the max dependable size should be around 1 billion , leaving 2 bits for boundary overflow.

---

the scope of tock

distances travelled in 1 tock
to travel 1/32th of the inner zone in one tock - a fast but not shocking speed is to travel 500 mill/32
16,777,216  17Mc

to travel 17Kc is 1 thousandth of that speed,

if rendering is set 1 tock to 1/32th second
and the inner zone plane is visible at scale of 256 pixels
17Mc will move across 256 pixles in 1 seconds

high speed and large objects need ticked
low speed small objects dont


-------------

collision detection and reactance

collision connotates primary nonlinearity change in involved stance
and secondary linearity change in nearby stances (through g&m)

bruteforce collision resolution involves
finding exactly the first collision to alter
and revising new dest and origins for all involved stances

then finding next collision from that subtick time
and repeating until no more collisions or next tock is reached.

the granularity of the tock is called into focus here:
is the tock designed to be , a significant time period or no?

well, the tock is designed mainly, to be small enough to make
appromixation of gravitational and magnetic curves, practical ( to apply acceleration )
and to resolve most collision situations without chain reaction approximation.

tock is our standard approximation of time, 
subtock accuracy enhancements might be applied, for strong/close gravity, magnety, bonding, bunched object formations.

so the framework should allow for application of these

tick is tool

where stances have recorded position at origin and destination
they can also have origin updated, to a later tick.
with origin updated post collision, it is know that there will be no invalid intersections before that tick, if the origin is set to it

post collision, check if affected stances need rebunched ( they prob shouldnt) 
---

basic framework:

data structures set up for future expansion.

basic framework:
no collision detection or resolution, no sub tock acceleration,
bunching performed and used for basic gravitational adjustment

so basic framework, does tock-step position updating, with tock grained gravity.  

----

tweak later, ini with 64k long stancelist, 4k long bunchlist with max 32 stances/bunch

64k stance elements 
4k bunches (w/128k empty bunch elements)

details per stance
details per bunch

stance:
int forep[3] 
int leadp[3]
float weight
float span
int chromrgba
int acters

10 bytes * 64k = 640k 
possibly add
int posA_xyz+span[3]
int posB_xyz+span[3]

bunch:
short stancekeys[32]  64bytes 
int formuhposP_xyz+span[3]
int formuhposQ_xyz+span[3]
int formuh.ave.vel_xyz[3]


-------

#collision detection

interaction detection schema
. assume values preselected as crossing
. abs(itimeXf-itimeXg)<threshold       4+ 1/ 1c ~10 iops  w/every
. && abs(itimeYf-itimeYz)<threshold            ~10 iops   w/some
. && abs(itimeZf-itimeZz)<threshold            ~10 iops   w/some

see about optimising threshold accuracy

#threshold calculation.

values f , g
states o: origin , d: destination
time   t

t=(go-fo)/(go-fo-gd+fd)

t= difference/(rate of change)

gives point in time for a central match,
but radial matching occurs before center,

combined radius / relative speed before centre match

relative speed =fd-fo -gd+go   (/t=1)

firstt = ( go-fo --(gr+fr) )/(relativespeed)

firstt =(Og-Of-(R))/S
secondt=(Og-Of+(R))/S

Og-Of = S seperation

tmx = (Sx-R)/Vx, tlx=(Sx+R)/Vx
these are the times at which meet occurs IF,
Sy-Vy*Tmx=R, and Sz-Vz*Tmx=R

as cubez
in 1 plane if the crossing approach occurs after t=1, no hit

if(Sx/Vx-D/Vx>1<0) no hit
if((Sy--D)/Vy>1<0) no hit
if(abs((Sx--D)/Vx-(Sy--D)/Vy)<
if(abs((Sx--D)/Vx-(Sx--D)/Vx)>(~D/Vx+Vy)) no hit

if(timetocenter>1+2r/Vx)
if(timetocenter<0-2r/Vx)
if(timetocenter-2r/Vx>1)
if(timetocenter+2r/Vx<0)

centertimex>2r/Vx
centertimex<1-2r/Vx

abs(centertimex-0.5)<(0.5-2r/Vx)  means 1d enables hit

centertime1d   eclipsetime1d 

it can be seen, spherelaptime is reduced to 1/1.41 when vx=vy
spherelaptime=squarelaptime*(vx*vx*2)/(vx*vx+vy*vy) 
squarelaptime=2r/vx


timings, we must take, start and end of smallest!



each dimension has a moment of passing, and a period of passing
when the moment and the period are equal, 
regard, difference in midtime and difference in passtime
diff in passtime, proportional only to diff in vel
diff in midtime proportional to r, sep and 

get the three centertimes
calculate a factor of equality, so when

they are all equal, the encroagment distance is Rc

timelines:

when one is greater than Rc/Vcx, encroachment distance is negative
when diff by Rc/Vcx, encroachment distance is negative

centertime=(Sx)/Vx
diff in centertime  =Sx/Vx-Sy/Vy

timetocenters=(Sx)/Vx , Sy/Vy
dist to center Sx, Sy
time near center = Dx/Sx/Vx  , Dy/Sy/Vy

the big equaltion draws a circle in 3d, which is why it doesnt solve,

if we solve with a line through the circle, the big equaltion will give 2 points.

or a plane through the circle??

when centertimes are all equal, intercept is dead on, 


(then put stances in dolist, with time, and a sort index)

---
 
#form collision 
 
 if  formu[g][crnh][x]>formu[f][crnl][x]
 &&formu[g][crnl][x]<formu[f][crnh][x]
 { x overlaps }
 
 or less branching
 ((formu[g][crnh][x]-formu[f][crnl][x])
 |(formu[f][crnh][x]-formu[g][crnl][x])
 |(formu[g][crnh][y]-formu[f][crnl][y])
 |(formu[f][crnh][y]-formu[g][crnl][y])>0)
 &&
 (((formu[g][crnh][z]-formu[f][crnl][z])
 |(formu[f][crnh][z]-formu[g][crnl][z])>0)
 
 { all dims overlap
   if high energy, do more precise check }

 }
 
 `optima - make forms more likely thinner in 1 dimension,
and check this dimension first.
 
 g    l    h
 f           l    h
 
 g          l     h
 f    l    h

 --------------
 

 #bunches

bunch quality - density and movement coherence
bunch linking - neccessity reduced by seperating inner-bunch interaction dectetion, and bunch pairing interaction.

separate:
check each stance in a bunch, against each stance in paired bunch.
check each stance in a bunch against other stances in same bunch

separation like this allows optimal, simple bunch contact pairing

gen list of all bunches contacting other bunches
4k bunches - bound of 8 million checks(!)  

-may want to bunch the bunches, or do some lesser approximation of such as filling bunch groups

as bunch is made it is found it is assigned to a group

stance
formation
~anyway

#bunch spec.
 key                n-short
 bounding cuboid
  corner-lo3 corner-hi3 loc-int-v3
 mass               m-int
 c.o.g               loc-int
 avg vector o3 d3   loc-int-v3

 
 #bunch addressing
the overhead of mating all bunches is:
4k^2 /2 8,000,000 *20 ops ~160,000,000 - too much
----

so we use a globlist of 512 - or 256bytekey

bound of mating 512 globs is:
512*256 = 130,000      ...*20 = 2,500,000 ops

which produce globpairs, normaly?
if all globs touched,
512*256 pairings 
130,000 glob pairs, containing avg 8x2 bunches each
8*8*130,000 = 8,320,000 ,*20 = 160,000,000

(but this should be significantly reduced by contact factor)

and from 512 solo globs containing avg 8 bunches each
4*7*512 = 16384 * 20  ~ 350,000 ops (tiny)


create/maintain stancelists   32k max
helpinfo: stancestats
create/mantain bunchlists   4k  max
bunchstats:
create/maintain globlists    512 max
globstats:
make glob-pair-list>globpairs

unimate glob-solos >bunchpairs
bimate glob-pairs >bunchpairs

unimate bunch-solos>stancepairs
bimate bunch-pairs>stancepairs

make stancepair sortlist

adjust 1st in list > 2 different stances
each stance,
remate with all stances in area? 
add to stancepairlist, update sortlist
do next in list

the list may contain invalids, possibly many...
a way to skip pairing invloving a recharted stance would be goode
well....
boolean array of recharted, would be 4k long
the index key of stancepairs, records the order which stances where added
if a running average of rechart misses trips a threshold
boolean array is used to remove all recharts from sort list?
upto new pairings ???

stancepair list
pairsort list

stancepairlist
key
 generation order (int size 512m max, eg 32k 1 per st, solid)
values
 stancekeyf   short
 stancekeyg   short
 collidetime   short or int
 
pairsortlist 
key sparse x2, for insertion
 timesorted order (int size)
value
 stpairlistkey  int

 
possible to sweep pairsortlist
if pairsort.pkey.listkey<genend
&&( booldone[pairsort.pairgen.stancekeyf] | boodone[pairsort.pairgen.stancekeyf] )
{pairsort.pkey.listkey=invalid}



#applying gravity
inverse square distance

difference in position

this.dest+=
(this.origin- that.origin)*(this.mass+that.mass)
/(this.origin-that.origin)*(this.origin-that.origin)

force
=(this.mass+that.mass)/(this.origin-that.origin)*(this.origin-that.origin)

f = m*a, a=f/m

this.dest+=the.force/this.mass

wrong!! not 3d
this.dest+=
((this.mass+that.mass)/this.mass)
/(this.origin-that.origin)*abs(this.origin-that.origin)

this.dest+=
((1+that.mass/this.mass)/(this.origin-that.origin))
/abs(this.origin-that.origin)

3 adds, 3 divs, 1abs, approx 20 clicks,

80 clicks for full thing

32k stances, *80 *(8+8+256)
650,000,000  clicks  -way too much

so do it, within form  32k*80*8
and within contacting forms
stance > form.stance
stance > glob.form

length of a vector
x y z

dist=sqr(x2+y2+z2)
so
force
=(this.mass*that.mass)/sqr(x2+y2+z2)*sqr(x2+y2+z2)

force=m*a

i.m*accelv=(i.m*a.m)/(x2+y2+z2)

accelv=(a.m)/(x2+y2+z2)      4(*) 2(+)  ~20 
denom=(absx+absy+absz)     6(>>) 3+ 2+ ~10          
+zdif =+z*accel/denom       2(*) 1+   ~8
+ydif =+y*..
+xdif
approx 60 iticks

!very wrong!

#gravity recap

gravity will be approximated
its calculation will complicate the nature of forms.
forms will contain only one heavy particle, 
and form size will be normaly restricted
so that a uniform acceleration can be calced and applied
to each form, from summing nearby forms, and distant globs,
and most distant gglobs.

good for grav
for each pod, a list of contacting pens?
for each aglob (1000), a list of uncontacting bglobs (128)
for each bglob(128), a list of uncontacting cglobs(16) 
16 128 1024 8192 32k

good for collision
for each pod a list of comingled pods
for each pen a list of comingled pens
for each pool a list of comingled pools
for each park a list of comingled parks

stance : pod : pen : pool : park
32k     8k    1k    128    16

for grav take lists,
for each pod a list of comingled pods
for each pen a list of comingled pens
for each pool a list of comingled pools
for each park a list of comingled parks


using one way grav
for each park, pools of non-comingled parks can have park grav applied
each park can apply to into (parks or pools or pens) of ncombg parks, its park grav

#---
park (into) ncombg parks
pools in the park, (into) the combg parks

then what remains
is parks into self
#---

parks into self.

pools into ncombg pools
pens in pool into combg pools

then pens into self


this sequence is good,
(into) can do fine resolution depending on mass.


where the bulk complexity is 32k*32k
this will reduce it by great degree
and still be very smooth.

-----
computationaly exquisite
-----

one way grav formula

since,
f= m1 * m2 / r*r

f=m1*a
m1*a=m1*m2/r*r
a=m2/r*r
ax=m2/(x*x+y*y+z*z) *x/sqr(x*x+y*y+z*z)  (keeps x in proportion?)

a=m2/(x*x+y*y+z*z)

aa=g*m2/pow((x*x+y*y+z*z),1.5);  //pow vgood for lookup
ax=x*aa
ay=y*aa
az=z*aa

approx 40 iops

when that is done for each,
take the pools of each park
and do same,
each pool can apply to into (pools or pens) of ncombg pools, its pool grav

and apply their pool grav into all combg parks pools. 

the pools of that park can have ncomb 

continued:
applying both sides of a gravity pairing,
reuses calculation of 
the most difficult term: aa=(m)*g/pow((x*x+y*y+z*z),1.5);
and of rounding adjustment for x|y|z
but paired graving can compromise accuracy,

eg.
singled
park to park.park         n*(n-1)     //too innacurate undesirable    
park to park.pools        n*n*(n-1)    //desirable accuracy
park.pools to park.pools  n*n*n*(n-1)  //reserve for combf where 1n is reduced, trace and use double?

doubled
park to park.park        n*(n-1)/2    // too innacurate undesirable
park to park.pools        n*n*(n-1)/2  // asymetric accuracy undesirable
park.pools to park.pools  n*n*n(n-1)/2 // main option


---

within all
(16 parks)
park.park to parks.ncombg.pools singled   (5*8)        40
park.pools to parks.combg.pools doubled   (8)*3*8  /2  96
2176

within parks
16x8 pools                                                  
pool.pool) to pool.ncombg.pens singled     5)*8         40
pool.pens) to pools.combg.pens  doubled   (8)*(3*8)/2   96
17408

within pools
16x8x8 pens                                                     
pen.pens to pens.ncombg.pods  singled    5)*8         40
pen.pods to pens.combg.pods   doubled   (8)*(3*8)/2    96
139264

within pens
16x8x8x8 pods
pod.pod to pod.ncombg.stans   singled    5*4          20
pod.stans to pod.combg.stans  doubled    3*4*4/2      24      
360448
                                     
within pods
16x8x8x8x4 stances
stances to stances         doubled        4*3/2         6
49152


1234

12 13 14 23 24 34

208000 * 50 iticks
10,400,000  -for 32k  1/100th second at 1ghz - goode

536,870,912  for 32k brute force

may want to try different division sizes later
but these will do well for begin
-----


note that the edges of packs, are dispurse

-----------------------------------

#collision detection
#pitstop summary

1d collision detection is deceptively simple
most desireable finding to calculate should be time of collision
most useful collision discernent process/formula provides a useful estimate of impact time, and takes 2 different sized objects

early stage of process, can treat objects as two aligned cubes
we begin work with 1d object distances, and relative 1d velocities
we can calculate a ccT centercontacttime for each dimension.
we can calculate a culapTi - cubiclaptimeinterval for each dimension.
this is the length of time which the object would be in contact with the the other, if other dimensions allowed.

the ccT is dstncx/velx
the culapTi is (sza+szb)/velx

for each dimension, some part of culapTi must fall within the tock
and to collide some part of its culapTi must fall within the others culapTis

basic detection involves testing each culapTi is within the tock and within the other twos culapTi

basic estimation can choose the midpoint of the commonTi
or possibly triangulate the three culaps
or
cubiclaptimeinterval may be enhanced to circlelaptimeinterval
by reducing the range to 1/1.41 as velx=vely
it can be visualized that at 45% the cubes clip each other for this ratio
compared to others. sin or sqrt might be used to formulate this easily, this is where complexety holds the investigation at this point.


we can say xculpt = r/xvel and yculpt = r/yvel
common-culpt is their overlap
when cculpt*yvel <r  its a clue 
----
ideastorm produce this equation to find time of contact:
sza+szb= sqrt((Sx +Vx*T)2 + (Sy +Vy*T)2 + (Sz +Vz*T)2)

but it is not solveable for T yet.

it might be used to interpolate correct T.
 
 (a +p*t)2 + (b +q*t)2 + (c +r*t)2 -sza-szb = 0
 
 aa 2apt pptt  bb 2bqt qqtt cc 2crt rrtt
 
 ABCR=a*a+b*b+c*c-D*D
 Ap=a*p<<1, Bq=b*q<<1, Cr=c*r<<1
 P=p*p, Q=q*q, R=r*r

 0 = ABCR+((PQR*t)+ApBqCr)*t
 0 = a + bt + ctt
 
 -----

 ----- 
 surface collision implementation
 
 surfaces can be stored inside forms, 
 as particle triples, demanding a different collision detection
 
 
 ---- 
 rethoughts on heirarchy size
 
 instance form globule
 32        4     .5
 32        8     2        1/4
 
 forms are normaly best quite small sized
 expecting 1 to 6 instances contained
 average 4, so have max 6 instances per form
and 8k of forms. well, this can be tweaked later. 

 forms group on velocity and location
 
 globules should group on location
 but globules will always overlap
 
 gravity processing requires:
 apply adjustments
 
 stance-stance
 stance-form
 form-globules
 
 before applying stance-stance
 feild is calculated for the form
 from nearby form
 nearby globules
 
 for every globule, a feild is calculated from all other 
 non contacting globules,
 
 nope,some of the heaviest globules, are applied to every
 form regardless of distance
 
 nope we need sectors.
 
 for each form
 apply stance-stance for forms in section
 apply stance-form for forms in section2
 apply form-form for forms in section3
 apply form-glob for forms in section4
 
 leap around space, if it is heavy and large enough
 apply to glob
 
 even glob is too fine for gravity calc,
 because we need to prioritise and localise accuracy
 
 we can do space split, gravity octree space
 
 cog maps
 
 stance- stances got from form
 stance-stances got from near forms
 form-forms
 
 takes about 60 ticks to do a grav
 32k*60= 1920k ticks  is 1 grav per stance
 even that is pushing it!
 
 
 #kindred stances
 forms can contain nomad stances
 or kindred stances

 kindred stances are keyed in form/pod
 to a kindred link list
 
 collision of kindred stance is processed to all
 in form and other forms keyed in the kindred link
 
 the kindred link describes links to other stances in the form
 and other stances in other forms
 
 this is an expansion plan, not for implementation
 in stage 1
 
---- 
 
 resolution check
 
 sun diameter
 earth diameter 12,756k
 distance earth from sun 1 au, 150,000,000 kilometres
 jupiter 5 au
 neptune 30au
 distance kuiper belt 55 au
 
 
 40 au is 6 billion kilometers
 using 31 bits, 1 bit is 2.8 k
 minimum solid body is 16*2.8k = 45k
 flat out noise/dither +- 5k
 smoothness at about 200k
 
 for solar gravity simulation, smooth objects over 500 kilometers
 out past neptune - pretty good!
 
 
//with random indexing, the up down score will tend towards equality
//when it is equal or near equality and sample is considered more reliable
//if there are too many ups, then some should be in the low
//pushing low up, and some lows should not be in the up, pushing up down a little

upsum/upnum = upscore - average of larger 
dwsum/dwnum = down score - average of smallers


the purpose is to measure the average variance of series
when an end has too much, it is probably skewed towards average
and so adding more away from average is indicated

//too many ups, ups should be higher
//too many dwns, dwns should be lower

//too few dwns, dwns should be higher
//too few ups, ups should be lower

upsm = upsm + dwsm * (un-dn)/(un+dn)
dnsm = dnsm + upsm * (un-dn)/(un+dn)

//prehaps its all nonsense

gives a little info on spread of distribution

many of the lows are good for grouping
some of the highs,
however low and high can be 

how to make a roster within a roster
to trip the scale finding loop
place an outscale point with rest of world in a very small point
outscale points can be placed

world sweep to indentify 

sweeping particles

calculate average particle position
average particle spacing abs(xp-xq)+abs(yp-yq)+etc

#reverse bit shuffle

unsigned int v; // 32-bit word to reverse bit order

// swap odd and even bits                              //1  1
v = ((v >> 1) & 0x55555555) | ((v & 0x55555555) << 1); //2  3
// swap consecutive pairs
v = ((v >> 2) & 0x33333333) | ((v & 0x33333333) << 2); //4  15
// swap nibbles ... 
v = ((v >> 4) & 0x0F0F0F0F) | ((v & 0x0F0F0F0F) << 4); //8  255
// swap bytes
v = ((v >> 8) & 0x00FF00FF) | ((v & 0x00FF00FF) << 8); //16
// swap 2-byte long pairs
v = ( v >> 16             ) | ( v               << 16); //32



//------------------------------

20 addressable points

1 2 3 4 5 6 7 8....

1 5 2 3 6 4 7 9 8

1 2 3 


32 

32 33 34 35 

//---------------


var rst = //array of object 
[ { 
    vals: new UInt16Array( pqty ),  //max tacks - this can be globalized
    slti: new UInt16Array( 256 ),   //max roster slti
    sltl: 0,                        // len of slti
		lobnd: new Float32Array(3),
		hibnd: new Float32Array(3),
		div: new Float32Array(3)
} ];

eg top roster is 50,000 refs long - 100 kilobytes
split by 100   100 slti
containing 500 refs each average
but can contain total in one slt of next lvl

parallel: read and fit tacks into min groups


parallel: attempt to list all collisions before dt=1
if not possible, reduce dt, remove the late, continue with listing


ddt=0

go to earliest collision in list after ddt
perform it, if change group bounds necessary..
otherwise re_search affected tacks presence 
and note in new collision times

