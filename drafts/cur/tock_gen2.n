//file is just pre-proto sketches of datatypes

top data structures

to make pods:

pod management principles

64k particles total

4 particles per podmin

4*2bytes * 16k = 128k of particle references , 256k for 8 ref spaces

16k 4 particle pods

256kB pod prefs *8      
200kB pod avg pos,      16*1024*4*3 bytes = 200k
200kB pod avg velocity  
200kB pod max pos
200kB pod min pos
200kB pod max vel
200kB pod min vel

1k singlet pods


partels are grouped into pods

then pods are grouped into 8pucks

then 8packs are grouped into 8packs

then 8packs are grouped in 16packs

4*8*8*16 = 4096

64k              tums

64k /4  = 16k    pack4s

16k/8 = 512      pack6s

512/8 = 16       pack10s


2k 2 particle pods

 //------------------
 
 simplest collision sequencing
 
 cgrouping
 
 make cgroups
 
 make cgroup potential interaction list
 
 next interaction is first before t=1
   solve next interaction
   reassess solved particles cgroups and interactions
	 
	 
principles of collision grouping...

collision grouping is fuzzy
collision grouping should be multi-tiered
collision grouping could be compromised with feild grouping

grouping structure must allow for fast dynamic reassignment

grouping done based on size, positional and velocity similarity

small particles should not be grouped with large unless very close

grouping algorithm

groups filled pressure (0 = all groups filled) 


principles and purposes of grouping

grouping allows spacebound based elimination of collision


while (ungroupedparticle)
  score ungrouped particle to all groups (0 = great match )
	if bestscore < group_fill_pressure
	( group the particle there )
	else
	{ make new group, split best group and new particle }


micros  0-8    1p 3v  centpnt avg vel p-indexes
minis   0-16   2p 2v  bnd corners, c-point, 
mids    0-16   3p 1v 
mugs    0-32   3p 1v


UcG  
bounding corners 2*2*3  
center point 1*3  
avg vel 1*3  vair velocity 1*3
1*8 particle indexes
total 32 ~numbers 

16k pots allow 64k particles at 50% fill
16k * 8 * 32 - bytes
=4 megabytes  eg.16k pots

McG
ScG
Bcg


192 2*3*32b bounding edges
192 2*3*32b bounding velocities
128 1*8*16b pindexes

total 512b*8k = 4 megs max

ppot0 8   bev  
ppot1 16  band
ppot2 16  bunch
ppot3 32  bundle


atm.loc      3*32float
atm.vel      3*32float
atm.time     32uint
atm.type     8uint     

atm dia      32 float
atm mass
atm links
atm spin

to divide, to pick team, to class, to group

assort

band bunch bundle
minim  crot quav 

solo kind convoy flock lobe

kin.fillsieve = new Uint32Array( 16k/32 )
kin.atoms = new Uint16Array( 8*16k ); //space for 64k particles 4 per knd
kin.loctimetype = new Float32Array(16k*8);    
kin.time =



var kins =
{ 
  atoms: new Uint16Array( 8*16k ),
	lvtt:  new Float32Array(16k*8)  //location vel time type  :512k bulk
	}
	
kinP(i)
x=kins.lvtt[i]
return [x[0],x[1],x[2]]


kinship test,
does particles start and end position fit into kin
is particles direction similar?
	
16k kins ,48k solos possible


set this framework and play as it comes...

#16k kins combine 64k atoms at avg 4 atoms/kin
  kins are minimal grouping classifications
  it would be nice for kins to omit location bounding vectors
  but perhaps impractical
  also velbound vectors
  these can need recalculated every event
  possible to leave as is, and  



#2.7k convoys have to combine 16k kins at avg 6 kins/convoy  (24 atoms)

#256 flocks have to combine 2.7k convoys at avg 11 cvoys/flock (256 atoms)

#16 lobes have to combine 256 flocks at avg 16 cvoys/lobe 


to address kins or solos in convoys

solo.atoms = new Uint16Array(64k)

kins, convoys, flocks and lobes,  these are guidedrafts, addressing notes,
organisational units
each maintains,
	list of members
	handy summary of position and movement
	
handy summary is accessed to assess members and to assess collsions

go ahead build fill
flyfillkins(atomlist)
{
  make movementindex
	make locationindex
}
flydefragkins


clumpmap

for each axis
do a tally of equidivs
set divisions at each minima of tally 

however details spread throughout axis will interfere with each other,
clump isolating divisions through lines will not apply through other lines


evensplit
clumpsplit


//-----------------

re scale of qty targeting
top levels special targetting
in levels meaning for low down groupings
recursion coveniante allows convieniaent long chain reduction of detail
so....
levels of rerusion maps

particles repeated by avg 4 - 2 bits

how to average 8 - 3 bits, why to average 8
why not to average 2

memory required to chop at 

bits to chop?  16 or 20 bits, 20 bits ok
20 bits 10 levels recursion

1mw details  20*3 bits each  64megbit 8megytte
target is .64mw  approx 4 MB
4 MB 


64k word details

4* 
separate into ...

64kw dets is 16bits address space
max val 16 int is 256*256 65536

div4
65536
16384
4096
1024
256
64
16
4
1

extra complex recursive rangefinding
rangefinding for group creation ?and traversal
outlier protection,
map shrink option
map shrink not necc as groups

every level wants a low contemporary count
eg population under ... 10
ideal pop over...3   



#sector location system
//tack by sector lookup system

tack by sector locator objects
directly index the roster
which is a by_sector *sorted set* of tack refs
which directly indexs the tacks

so TbSl objects indirectly index sectors to tacks
TbSl objects are nested 

sortedset
